{"version":3,"sources":["modules/Play.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Queue","props","sendRequest","direction","messageWebSocket","send","focusGameDiv","gameDiv","document","getElementById","focus","state","content","this","id","tabIndex","onClick","React","Component","App","WebSocket","console","log","OPEN","onopen","className","Play","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAwEeA,E,YAxDd,WAAYC,GAAa,IAAD,8BACvB,4CAAMA,KA4BPC,YAAc,SAACC,GACd,EAAKF,MAAMG,iBAAiBC,KAAKF,IA9BV,EAqCxBG,aAAe,WACd,IAAMC,EAAUC,SAASC,eAAe,WACpCF,GACHA,EAAQG,SAtCT,EAAKC,MAAQ,CACZC,QAAS,IAHa,E,iFAkCvBC,KAAKP,iB,+BAUI,IAAD,OAER,OACA,yBAAKQ,GAAG,UAAWC,SAAU,GAC3B,4BAAQC,QAAS,kBAAM,EAAKd,YAAY,OAAxC,QACA,4BAAQc,QAAS,kBAAM,EAAKd,YAAY,OAAxC,SACA,4BAAQc,QAAS,kBAAM,EAAKd,YAAY,OAAxC,WACA,4BAAQc,QAAS,kBAAM,EAAKd,YAAY,OAAxC,a,GApDgBe,IAAMC,WCoBXC,EA7BH,WACX,IACMf,EAAmB,IAAIgB,UAAU,wBAAyB,iBAgBhE,OAZAC,QAAQC,IAAIlB,GACZiB,QAAQC,IAAIlB,EAAiBmB,MAM7BnB,EAAiBoB,OAAS,WACzBH,QAAQC,IAAI,QACZlB,EAAiBC,KAAK,iBAItB,yBAAKoB,UAAU,OACd,8BACC,kBAACC,EAAD,CACCtB,iBAAkBA,OChBHuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACR,kBAAC,EAAD,MACEzB,SAASC,eAAe,SDkIrB,kBAAmByB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.562338ae.chunk.js","sourcesContent":["import React from 'react';\n//import Queue from './Queue';\n//import ArrowKeysReact from 'arrow-keys-react';\n\ninterface IPlayPageState {\n\tcontent: string;\n}\n\n// Gonna need player type\ninterface IPlayPageProps {\n\tmessageWebSocket: WebSocket;\n}\n\n\n\nclass Queue extends React.Component<IPlayPageProps, IPlayPageState> {\n\tconstructor(props: any) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tcontent: ''\n\t\t}\n\t\t// ArrowKeysReact.config({\n\t\t// \tleft: () => {\n\t\t// \t  this.setState({\n\t\t// \t\tcontent: 'left key detected.'\n\t\t// \t  });\n\t\t// \t},\n\t\t// \tright: () => {\n\t\t// \t  this.setState({\n\t\t// \t\tcontent: 'right key detected.'\n\t\t// \t  });\n\t\t// \t},\n\t\t// \tup: () => {\n\t\t// \t  this.setState({\n\t\t// \t\tcontent: 'up key detected.'\n\t\t// \t  });\n\t\t// \t},\n\t\t// \tdown: () => {\n\t\t// \t  this.setState({\n\t\t// \t\tcontent: 'down key detected.'\n\t\t// \t  });\n\t\t// \t},\n\t\t// });\n\t}\n\n\tsendRequest = (direction: string) => {\n\t\tthis.props.messageWebSocket.send(direction)\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.focusGameDiv();\n\t}\n\n\tfocusGameDiv = () => {\n\t\tconst gameDiv = document.getElementById(\"gameDiv\");\n\t\tif (gameDiv) {\n\t\t\tgameDiv.focus();\n\t\t}\n\t}\n\n\trender() {\n\t\t//{/*...ArrowKeysReact.events*/...}\n\t\treturn (\n\t\t<div id='gameDiv'  tabIndex={0}>\n\t\t\t\t<button onClick={() => this.sendRequest('L')}>Left</button>\n\t\t\t\t<button onClick={() => this.sendRequest('R')}>Right</button>\n\t\t\t\t<button onClick={() => this.sendRequest('F')}>Forward</button>\n\t\t\t\t<button onClick={() => this.sendRequest('B')}>Back</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default Queue;\n","import React from 'react';\n// import logo from './logo.svg';\n// import Landing from './modules/Queue'\n// import { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Play from './modules/Play'\n\nconst App = () => {\n\tconst inQueue = true;\n\tconst messageWebSocket = new WebSocket('ws://10.2.5.173:42069', 'echo-protocol');\n\t//const videoWebSocket = new MediaStream;\n\t//10.2.5.173:42069\n\n\tconsole.log(messageWebSocket)\n\tconsole.log(messageWebSocket.OPEN)\n\t\n\n\t//On recieve \"youre up\" message\n\t//Update inQueue to false\n\n\tmessageWebSocket.onopen = () => {\n\t\tconsole.log('Open');\n\t\tmessageWebSocket.send('Hello Server')\n\t}\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<main>\n\t\t\t\t<Play\n\t\t\t\t\tmessageWebSocket={messageWebSocket}\n\t\t\t\t></Play>\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport React, { Component } from 'react';\n// import { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n\t<App />\n\t, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}